@page "/account/identity/register"
@using Application.DTOs.Request.Account
@using Application.DTOs.Response.Account
@inject IJSRuntime js
@using Application.Extensions
@using Microsoft.AspNetCore.Components.Forms

<div class="limiter">
    <div class="container-login100">
        <div class="wrap-login100">
            <div class="login100-pic js-tilt" data-tilt>
                <img src="imgs/chinesplateregister-removebg-preview.png" alt="IMG">
            </div>

            <EditForm Model="@UserRe" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />
                <span class="login100-form-title">
                    Member Registration
                </span>

            

                <div class="wrap-input100 validate-input" data-validate="Name is required">
                    <InputText class="input100" @bind-Value="UserRe.Name" placeholder="username" />
                    <ValidationMessage For="@(() => UserRe.Name)" />
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa fa-user" aria-hidden="true"></i>
                    </span>
                </div>

                <div class="wrap-input100 validate-input" data-validate="Valid email is required: ex@abc.xyz">
                    <InputText class="input100" @bind-Value="UserRe.Email" placeholder="Email" />
                    <ValidationMessage For="@(() => UserRe.Email)" />
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa fa-envelope" aria-hidden="true"></i>
                    </span>
                </div>

                <div class="wrap-input100 validate-input" data-validate="Password is required">
                    <InputText class="input100" @bind-Value="UserRe.Password" placeholder="Password" type="password" />
                    <ValidationMessage For="@(() => UserRe.Password)" />
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa fa-lock" aria-hidden="true"></i>
                    </span>
                </div>

                <div class="wrap-input100 validate-input" data-validate="Confirm Password is required">
                    <InputText class="input100" id="confirmPassword" @bind-Value="UserRe.ConfirmPassword" placeholder="Confirm your password" type="password" />
                    <ValidationMessage For="@(() => UserRe.ConfirmPassword)" />
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <i class="fa fa-lock" aria-hidden="true"></i>
                    </span>
                </div>

                <div class="container-login100-form-btn">
                    <button type="submit" class="login100-form-btn">
                        Register
                    </button>
                </div>

                <div class="text-center p-t-136">
                    <a class="txt2" href="/account/identity/login">
                        Already have an account? Login here.
                        <i class="fa fa-long-arrow-right m-l-5" aria-hidden="true"></i>
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code{
   
    public CreateAccountDTO UserRe { get; set; } = new();
    bool isLoadingData = true;

   
    
    private async Task HandleRegistration()
    {
        var response = await accountService.CreateAccountAsync(UserRe);
        if (response.Flag)
        {
           
            
            var responseLogin = await accountService.LoginAccountAsync(UserRe);
            if (responseLogin.Flag)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDTO()
                    {
                        Token = responseLogin.Token,
                        Refresh = responseLogin.RefreshToken
                    });
                NavManager.NavigateTo("/", forceLoad: true);
            }
        }
      
        
        return;

    }
}        