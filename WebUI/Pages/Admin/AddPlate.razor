@page "/admin/plate/add"
@inject IFilesService FilesService
@using Microsoft.AspNetCore.Http
@using WebUI.Extensions

@attribute [Authorize(Roles = Constants.Role.Admin)]



<!-- breadcrumb-section -->
<div class="breadcrumb-section breadcrumb-bg">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-2 text-center">
                <div class="breadcrumb-text">
                    <p>Add new</p>
                    <h1>Plates</h1>       
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end breadcrumb section -->



<div class="container">
    <div class="wrapper">
        <ul class="steps">
            <li class="is-active">Step 1</li>
            <li>Step 2</li>
            <li>Step 3</li>
        </ul>
        <form class="form-wrapper">

            <EditForm Model="plate" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
            <fieldset class="section is-active">
                <h3>Plate Details</h3>
                <InputText type="text" name="name" id="plateName" @bind-Value="plate.PlateName" placeholder="Name"/>
                    <InputText type="text" name="bio" id="plateBio" @bind-Value="plate.PlateBio" placeholder="Bio" />
                    <InputNumber type="text" name="price" id="platePrice" @bind-Value="plate.PlatePrice" placeholder="Price" />
                    <div class="button next">Next</div>
            </fieldset>
            <fieldset class="section">
                <h3> Plate Image</h3>                                       
                    <div class="file-upload">
                        <div class="file-select">
                            <div class="file-select-button" id="fileName">Choose File</div>
                            <div class="file-select-name" id="noFile">No file chosen...</div>
                            <InputFile OnChange="SelectPlateImage" multiple="false" type="file" name="chooseFile" id="chooseFile"/>
                        </div>
                    </div>
                    <div class="button-container">
                        <div class="button back">Back</div>
                        <div class="button next">Next</div>
                    </div>
                  
            </fieldset>
                <fieldset class="section">
                    <h3>Category</h3>
                    <div class="row cf">


                        @foreach (var kvp in Categories)
                        {
                            <div class="four col">
                                <input type="radio" name="category" id="@($"category_{kvp.Key}")" value="@kvp.Value"  @onchange="@(e => plate.CategoryTag = kvp.Value)">
                                <label for="@($"category_{kvp.Key}")">
                                    <h4>@kvp.Value</h4>
                                </label>
                            </div>
                        }
                        

                       
                       
                    </div>
                    <div class="button-container">
                        <div class="button back">Back</div>                        
                    </div>
                    <input class="submit button" type="submit" value="Add plate">                                                     
                </fieldset>
            
        </EditForm>
          
        </form>
       
    </div>
</div>

<style>
    .section.is-active {
        position: relative; /* Ensure the fieldset is relatively positioned */
    }

        .section.is-active .next {
            position: absolute;
            bottom: 10px; /* Adjust as needed */
            right: 10px; /* Adjust as needed */
        }

    .button-container {
        text-align: right; /* Aligns its child elements (buttons) to the right */
        display: flex;
        justify-content: space-between; /* Aligns items with space between them */
        margin-top: 20px; /* Adjust margin as needed */
    }

    .button.back {
        position: relative;
        left: 0; /* Positions the "Back" button to the left */
    }

    .button.next {
        position: relative;
        right: 0; /* Positions the "Next" button to the right */     
    }

</style>
<script src="/js/AppPlate.js"></script>

@code {
    private const int MaxAllowedFileSize = 1024 * 1024 * 10;
    private string _errorMessage = string.Empty;
    public PlateDTO plate = new PlateDTO();
    Dictionary<string, string> Categories = new();
    private List<IFormFile> _selectedImages = new();
    private readonly IEnumerable<string> _allowedFileExtensions = [".jpeg", ".png", ".jpg", ".webp"];

    protected override async Task OnInitializedAsync()
    {
        await GetData();
        // Ensure plate.CategoryTag is properly initialized
        if (Categories.Any())
        {
            plate.CategoryTag = Categories.Keys.First();
        }
    }

    private async Task HandleValidSubmit()
    {         
        plate.Id = Guid.NewGuid().ToString();
        var result = await plateService.AddPlateAsync(plate);

        if (result.flag)
        {
            await js.InvokeVoidAsync("alert", $"{plate.PlateName}Plate were added");

            if (_selectedImages.Any())
            {
                foreach (var img in _selectedImages)
                {
                    Console.WriteLine("Uploading an image...");
                    await FilesService.UploadImageAsync(img, plate.Id!);
                }
            }

            NavManager.NavigateTo("/admin/plates/");
        }

        else
        {
            Console.WriteLine($"Failed to add plate: {result.message}");
        }
    }

    private async Task SelectPlateImage(InputFileChangeEventArgs e)
    {
        // You can allow the user to select multiple images at once, if so,
        // the e.FileCount property will be greater than 1, so you need a foreach loop
        // to convert and add each selected image to the _selectedImages collection

        // check for file size
        if (e.File.Size > MaxAllowedFileSize)
        {
            _errorMessage = "Image size is greater than max allowed file size";
            return;
        }

        // check for extension
        var fileExtension = Path.GetExtension(e.File.Name);
        if (!_allowedFileExtensions.Contains(fileExtension))
        {
            _errorMessage = $"Use of unacceptable file extension ({fileExtension})";
            return;
        }

        try
        {
            var buffer = new byte[e.File.Size];
            await e.File.OpenReadStream(MaxAllowedFileSize).ReadAsync(buffer);

            // Convert to base64-encoded data URL
            var base64String = Convert.ToBase64String(buffer);
            var tempUrl = $"data:{e.File.ContentType};base64,{base64String}";

            _selectedImages.Add(tempUrl.ToIFormFileFromBase64String());
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }

        // check for multiple files
        // TODO: Yours to implement if needed ;-)
    }

    private async Task GetData()
    {
        try
        {
            Categories = await plateService.GetCategories();
            Console.WriteLine("Categories fetched successfully.");
            foreach (var category in Categories)
            {
                Console.WriteLine($"Key: {category.Key}, Value: {category.Value}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex.Message}");
        }
    }

}  