@page "/admin/orders"
@using Domain.Models.Order
@inject IOrderService orderService

<h3>Orders</h3>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order Id</th>
                <th>User Id</th>
                <th>Order Date</th>
                <th>Order Price</th>
                <th>Order Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.UserId</td>
                    <td>@order.OrderDate</td>
                    <td>$@order.OrderTotal</td>
                    <td class="text-danger">@order.OrderStatus</td>
                    <td>
                        <select @bind="@order.OrderStatus" class="checkboxes">
                            @foreach (var kvp in Statuses)
                            {
                                <option value="@kvp.Key">@kvp.Value</option>

                            }
                        </select>
                        <button class="btn btn-primary" @onclick="@(async () => await ChangeOrderStatusAsync(order.OrderId, order.OrderStatus))">Change Status</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    }
@code {
    public IEnumerable<Order>? orders { get; set; }
    public IEnumerable<OrderStatus>? orderStatuses { get; set; }
    Dictionary<string, string> Statuses = new();
    private string AcceptStatusId = "95a16ed5-3da6-4502-ab24-92dc2ec0c777";


    protected override async Task OnInitializedAsync()
    {
        await GetData();
        try
        {
            orders = await orderService.GetAllOrders();
            orderStatuses = await orderService.GetAllStatuses();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching plates: {ex.Message}");
        }
    }


    bool isLoadingData = true;
    private async Task ChangeOrderStatusAsync(string orderId, string newStatusId)
    {
        try
        {


            if (orderStatuses == null)
            {
                Console.WriteLine("Order statuses not loaded.");
                return;
            }

            var order = orders?.FirstOrDefault(o => o.OrderId == orderId);
            if (order == null)
            {
                Console.WriteLine($"Order not found for Id: {orderId}");
                return;
            }

            if (order.OrderStatus == AcceptStatusId)
            {
                try
                {
                    var user = order.UserId;
                    var clearCart = await orderService.ClearCartTotal(order.UserId);
                    var getUserCart = await orderService.GetUserCart(user);
                    if (getUserCart != null)
                    {
                        
                        await orderService.UpdateUserCartAsync(user);
                        Console.WriteLine($"User Isorder changed! {getUserCart.IsOrdered}");
                        
                    }
                    if (clearCart.flag )
                    {
                        
                        // Optionally reload the order details or update the UI state
                        orders = await orderService.GetAllOrders();
                        Console.WriteLine("User cart total cleared!");
                    }
                    else
                    {
                        Console.WriteLine($"Error: {clearCart.message}");
                    }
                }
                catch
                {
                    
                }
            }

            var selectedStatus = orderStatuses.FirstOrDefault(s => s.Id == newStatusId);
            if (selectedStatus == null)
            {
                Console.WriteLine($"Status not found for Id: {newStatusId}");
                return;
            }
            Console.WriteLine($"Status Id: {newStatusId}");

            var response = await orderService.ChangeOrderStatus(orderId, newStatusId);
            
            if (response.flag)
            {
                // Optionally reload the order details or update the UI state
                orders = await orderService.GetAllOrders();
                Console.WriteLine("Order status updated successfully!");
            }
            else
            {
                Console.WriteLine($"Error: {response.message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing order status: {ex.Message}");
        }
        finally
        {
            isLoadingData = false;
        }
    }
    private async Task GetData() => Statuses = await orderService.GetAllStatusesDic();
}
