@page "/client/menu"
@using System.Security.Claims
@using Domain.Models.Authentication
﻿@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Home</PageTitle>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

@inject HttpClient Http
@inject IClientService clientService
@inject IOrderService orderService
@if (plates == null)
{
	<!--PreLoader-->
	<div class="loader">
		<div class="loader-inner">
			<div class="circle"></div>
		</div>
	</div>
	<!--PreLoader Ends-->
}
else
{

	

<!-- breadcrumb-section -->
<div class="breadcrumb-section breadcrumb-bg">
	<div class="container">
		<div class="row">
			<div class="col-lg-8 offset-lg-2 text-center">
				<div class="breadcrumb-text">
					<p>Fresh and Organic</p>
					<h1>Shop</h1>						
				</div>
			</div>

		</div>
			
				<div class="col-lg-8 offset-lg-2 text-center">
					<div class="search-bar">
						<input type="text" class="search-input"
							   @bind="searchTerm" @oninput="SearchPlates"
							   placeholder="Search plates...">
						<button class="search-button"><i class="fas fa-search"></i></button>
					</div>
				</div>
			
	</div>

</div>
<!-- end breadcrumb section -->

<!-- products -->
<div class="product-section mt-150 mb-150">
	<div class="container">
			<div class="row">
				<div class="col-md-12">
					<div class="product-filters">
						<ul>
							<li class="@("category-filter" + (selectedCategory == null ? " active" : ""))"
								@onclick="() => FilterPlates(null)">
								All
							</li>
							@foreach (var kvp in Categories)
							{
								<li class="@("category-filter" + (selectedCategory == kvp.Value ? " active" : ""))"
									@onclick="() => FilterPlates(kvp.Value)" data-filter="@kvp.Value">@kvp.Value</li>
							}
						</ul>
					</div>
				</div>
			</div>
		<div class="row product-lists">
				@if (filteredPlates.Any())
				{
					@foreach (var plate in filteredPlates)
					{
						<div class="col-lg-4 col-md-6 text-center @plate.CategoryTag.ToLower()">
							<div class="single-product-item">
								<div class="product-image">
									<a href="single-product.html"><img src="@plate.CoverImageUrl" alt=""></a>
								</div>
								<h3>@plate.PlateName</h3>
								<p class="product-price"> @plate.PlatePrice$ </p>
								<button @onclick="() => AddPlateToCart(plate.Id)" class="card__add-to-cart">
									Add to Cart
								</button>
							</div>
						</div>
					}
				}
				else
				{
					<p>No plates found.</p>
				}
			
			
			
		</div>

		<div class="row">
			<div class="col-lg-12 text-center">
				<div class="pagination-wrap">
					<ul>
						<li><a href="#">Prev</a></li>
						<li><a href="#">1</a></li>
						<li><a class="active" href="#">2</a></li>
						<li><a href="#">3</a></li>
						<li><a href="#">Next</a></li>
					</ul>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- end products -->

<!-- footer -->
<div class="footer-area">
	<div class="container">
		<div class="row">
			<div class="col-lg-3 col-md-6">
				<div class="footer-box about-widget">
					<h2 class="widget-title">About us</h2>
					<p>Ut enim ad minim veniam perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae.</p>
				</div>
			</div>
			<div class="col-lg-3 col-md-6">
				<div class="footer-box get-in-touch">
					<h2 class="widget-title">Get in Touch</h2>
					<ul>
						<li>34/8, East Hukupara, Gifirtok, Sadan.</li>
						<li>support@fruitkha.com</li>
						<li>+00 111 222 3333</li>
					</ul>
				</div>
			</div>
			<div class="col-lg-3 col-md-6">
				<div class="footer-box pages">
					<h2 class="widget-title">Pages</h2>
					<ul>
						<li><a href="index.html">Home</a></li>
						<li><a href="about.html">About</a></li>
						<li><a href="services.html">Shop</a></li>
						<li><a href="news.html">News</a></li>
						<li><a href="contact.html">Contact</a></li>
					</ul>
				</div>
			</div>
			<div class="col-lg-3 col-md-6">
				<div class="footer-box subscribe">
					<h2 class="widget-title">Subscribe</h2>
					<p>Subscribe to our mailing list to get the latest updates.</p>
					<form action="index.html">
						<input type="email" placeholder="Email">
						<button type="submit"><i class="fas fa-paper-plane"></i></button>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- end footer -->

<!-- copyright -->
	<div class="copyright">
		<div class="container">
			<div class="row">
				<div class="col-lg-6 col-md-12">
					<p>
						Copyrights &copy; 2024 - <a href="https://hamzabek.com/">Hamza Bek</a>,  All Rights Reserved.<br>
						Distributed By - <a href="https://hamzabek.com/">Liado</a>
					</p>
				</div>
				<div class="col-lg-6 text-right col-md-12">
					<div class="social-icons">
						<ul>
							<li><a href="#" target="_blank"><i class="fab fa-facebook-f"></i></a></li>
							<li><a href="#" target="_blank"><i class="fab fa-twitter"></i></a></li>
							<li><a href="#" target="_blank"><i class="fab fa-instagram"></i></a></li>
							<li><a href="#" target="_blank"><i class="fab fa-linkedin"></i></a></li>
							<li><a href="#" target="_blank"><i class="fab fa-dribbble"></i></a></li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
<!-- end copyright -->

<style>
		.search-bar {
			position: relative;
			max-width: 300px;
			margin: 0 auto;
			
		}

		.search-input {
			width: 100%;
			padding: 9px;
			font-size: 16px;			
			border-radius: 4px;
		}

		.search-button {
			position: absolute;
			top: 0;
			right: 0;
			background-color: #F28123;
			color: white;
			border: none;
			padding: 10px 15px;
			border-radius: 0 4px 4px 0;
			cursor: pointer;
			height: 100%;
			transition: background-color 0.3s ease;
		}

			.search-button:hover {
				height:100%;
				background-color: #d66c15;
			}

		.category-filter {
			cursor: pointer;
			margin-right: 10px;
			padding: 5px 10px;
			border-radius: 5px;
			transition: background-color 0.3s ease;
		}

			.category-filter.active {
				background-color: orange;
				color: white;
			}
</style>


}
@code {
	private string userId;
	public IEnumerable<PlateDTO>? plates { get; set; }
	private IEnumerable<PlateDTO> filteredPlates;
	  private string selectedCategory; // Track the selected category
	private string searchTerm;
	Dictionary<string, string> Categories = new();
	[CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = null!;


	protected override async Task OnInitializedAsync()
	{
		await LoadPlates();
		await LoadCategories();
	}

	private async Task AddPlateToCart(string plateId)
	{
		var authState = await AuthStateTask;



		foreach (var claim in authState.User.Claims)
		{
			Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
		}

		var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
		if (userIdClaim != null)
		{
			userId = userIdClaim.Value;
			var response = await clientService.AddPlateToCart(plateId, userId);
			if(response.flag)
			{
				await js.InvokeVoidAsync("showToast", "Added Successfully", "success");
			}
			else
			{
				await js.InvokeVoidAsync("showToast", "Something went wrong with the response", "error");
			}		
		}
		else
		{
			await js.InvokeVoidAsync("showToast", "something went wrong", "error");
		}
	}

	private async Task LoadPlates()
	{
		try
		{
			plates = await plateService.GetAllPlates();
			filteredPlates = plates; // Initialize filtered plates with all plates initially
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching plates: {ex.Message}");
		}
	}

	private async Task SearchPlates(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();

		try
		{
			if (!string.IsNullOrEmpty(searchTerm))
			{
				filteredPlates = await plateService.SearchPlatesAsync(searchTerm);
			}
			else
			{
				plates = await plateService.GetAllPlates();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error searching plates: {ex.Message}");
		}
	}

	private async Task LoadCategories()
	{
		try
		{
			Categories = await plateService.GetCategories();
			Console.WriteLine("Categories fetched successfully.");
			foreach (var category in Categories)
			{
				Console.WriteLine($"Key: {category.Key}, Value: {category.Value}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error fetching categories: {ex.Message}");
		}
	}

	private void FilterPlates(string? categoryKey)
	{
		selectedCategory = categoryKey;

		if (categoryKey == null)
		{
			filteredPlates = plates; // Show all plates if categoryKey is null (All selected)
		}
		else
		{
			filteredPlates = plates.Where(p => p.CategoryTag == categoryKey).ToList();
		}
	}
}