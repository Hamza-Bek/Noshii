@page "/client/menu"
@using System.Security.Claims
@using Domain.Models.Authentication
﻿@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Home</PageTitle>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
@inject HttpClient Http
@inject IClientService clientService
@inject IOrderService orderService
<style>
   

    .full-background {
        background-image: url(/imgs/PlatesBG.jpg); /* Replace with your image path */
        background-size: cover;
        background-position: center;
        height: 50vh;
        width: 100%;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
    }

    .cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin: 15rem 5vw 4rem;
        padding-top: 0;
        list-style-type: none;
    }
</style>

<div class="full-background"></div>

@if (plates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul class="cards">
            @foreach (var plate in plates)
            {                        
                <li>                    
                    <a class="card">
                    <img src="@plate.CoverImageUrl" class="card__image" alt="" />
                        <div class="card__overlay">
                            <div class="card__header">
                                <svg class="card__arc" xmlns="http://www.w3.org/2000/svg"><path /></svg>
                               
                                <div class="card__header-text">
                                    <h3 class="card__title">@plate.PlateName</h3>
                                    <span class="card__status">$@plate.PlatePrice</span>
                                </div>
                                <button @onclick="() => AddPlateToCart(plate.Id)" class="card__add-to-cart">
                                    Add to Cart
                                </button>
                            </div>
                            <p class="card__description">@plate.PlateBio</p>
                        </div>
                    </a>
                </li>                                
            }
        </ul>

        }

     
@code {
    private string userId;
    public IEnumerable<PlateDTO>? plates { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            plates = await plateService.GetAllPlates();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching plates: {ex.Message}");
        }
    }

    private async Task AddPlateToCart(string plateId)
    {
        var authState = await AuthStateTask;



        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
        }

        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;

            var getUserCart = await orderService.GetUserCart(userId);
            if(getUserCart.IsOrdered == true)
            {
                await js.InvokeVoidAsync("alert", "Please wait until your order is finished");
            }
            else
            {
                var response = await clientService.AddPlateToCart(plateId, userId);
                await js.InvokeVoidAsync("alert", "Plate added to the Cart :)");
            }
     
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Something went wrong");
        }

        // Assuming userId is fetched from a user service or stored in the component
        // Replace with actual user ID retrieval logic



    }
}