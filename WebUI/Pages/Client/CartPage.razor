@page "/client/cart/home"
@using System.Security.Claims
@using Domain.Models.Authentication
﻿@using Microsoft.AspNetCore.Components.Authorization
@inject IClientService clienService
@inject IOrderService orderService
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Home</PageTitle>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">




@if (isLoading)
{
    <p>Loading...</p>
}
else if (userId == "Unknown")
{
    <p>User ID not found. Unable to load cart items.</p>
}
else if (!plates.Any())
{
    <p>No items in your cart.</p>
}
else
{
    <div class="wrapper">
		<h1>Shopping Cart</h1>
		<div class="project">
			<div class="shop">
            @foreach (var item in plates)
            {
                <div class="box">
                  
                    <div class="content-cart">
                        <div class="details-cart">
                        <h3>@item.PlateName</h3>                        
                        <div class="act">
                        <h4>Price: $@item.PlatePrice</h4>
                        
                        <h4>Total : $@item.Total</h4>
                        </div>
                        </div>
                        <div class="actions-cart">
                        <p class="unit">Quantity:@item.Quantity </p>
                                <a class="btn-area" @onclick="() => DeletePlate(item.PlateId, userId)">
                                    <i aria-hidden="true" class="fa fa-trash"></i>
                                    <span class="btn2">Remove</span>
                                </a>
                               
                        </div>
                    </div>
                </div>
            }

            </div>
            <div class="right-bar">
                <p><span>Subtotal</span> <span>$120</span></p>
                <hr>
                <p><span>Tax (5%)</span> <span>$6</span></p>
                <hr>
                <p><span>Shipping</span> <span>$15</span></p>
                <hr>
                <p><span>Total</span> <span>$@plates.Sum(item => item.PlatePrice * item.Quantity)</span></p>
                <button class="btn btn-primary" @onclick="PlaceOrder">Place Order</button>
            </div>
        </div>
    </div>
    
}

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = null!;
    private string userId;
    private string cartId;
    private bool isLoading = true;


    private IEnumerable<CartItem> plates = new List<CartItem>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;

        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
        }

        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
        var userCartIdClaim = authState.User.FindFirst(c => c.Type == "CartId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
            cartId = userCartIdClaim.Value;
            plates = await clienService.GetCartItems(userId);

        }     

        isLoading = false;
    }



    private async Task DeletePlate(string plateId , string userId)
    {
        var selectedPlate = await clienService.GetCartItems(userId);

        try
        {
            var response = await clienService.RemovePlateFromCart(plateId, userId);
            if (response.flag)
            {
                plates = plates.Where(p => p.PlateId != plateId).ToList(); 
                NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting plate: {ex.Message}");
        }
    }

    private async Task PlaceOrder()
    {
        isLoading = true;

        try
        {
            var response = await orderService.PlaceOrder(userId, cartId);
            if (response.flag)
            {
                // Handle success (e.g., display a success message, redirect to another page, etc.)
                await orderService.ClearCartItems(userId);
                NavManager.NavigateTo("/client/order");
                Console.WriteLine("Order placed successfully.");

            }
            else
            {
                // Handle failure (e.g., display an error message)
                Console.WriteLine("Failed to place order.");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Error placing order: {ex.Message}");
        }

        isLoading = false;
    }
 
}